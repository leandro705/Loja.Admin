var pages = pages || {};
pages.agendamento = pages.agendamento || {};

pages.agendamento.model = function () {

    var vmEstabelecimento = function (estabelecimento) {
        var self = this;

        self.estabelecimentoId = ko.observable(estabelecimento.estabelecimentoId);
        self.nome = ko.observable(estabelecimento.nome);       
    };  

    var vmServico = function (servico) {
        var self = this;

        self.servicoId = ko.observable(servico.servicoId);
        self.nome = ko.observable(servico.nome);
    };

    var vmCliente = function (cliente) {
        var self = this;

        self.userId = ko.observable(cliente.id);
        self.nome = ko.observable(cliente.nome);
    };    

    var vmAgendamento = function (agendamento) {
        var self = this;

        self.agendamentoId = ko.observable();
        self.dataAgendamento = ko.observable();
        self.dataFinalAgendamento = ko.observable();
        self.dataAgendamentoDP = ko.observable();
        self.horaInicial = ko.observable();
        self.horaFinal = ko.observable();
        self.servicoId = ko.observable();        
        self.servicoNome = ko.observable();
        self.observacao = ko.observable();
        self.dataCadastro = ko.observable();
        self.situacao = ko.observable();
        self.userId = ko.observable();
        self.estabelecimentoId = ko.observable();
        self.estabelecimentoNome = ko.observable();

        if (agendamento) {
            let splitDataHoraInicial = agendamento.dataAgendamento.split(' ');
            let splitDataHoraFinal = agendamento.dataFinalAgendamento.split(' ');


            self.agendamentoId(agendamento.agendamentoId);
            self.dataAgendamentoDP(splitDataHoraInicial[0]);
            self.dataAgendamento(splitDataHoraInicial[0]);
            self.dataFinalAgendamento(agendamento.dataFinalAgendamento);
            self.horaInicial(splitDataHoraInicial[1]);
            self.horaFinal(splitDataHoraFinal[1]);
            self.observacao(agendamento.observacao);    
            self.servicoId(agendamento.servicoId);
            self.servicoNome(agendamento.servicoNome);
            
            self.dataCadastro(agendamento.dataCadastro);
            self.situacao(agendamento.situacao);
            self.userId(agendamento.userId); 
            self.estabelecimentoId(agendamento.estabelecimentoId); 
            self.estabelecimentoNome(agendamento.estabelecimentoNome);
        }
    };    

    return {       
        vmServico,
        vmCliente,
        vmEstabelecimento,
        vmAgendamento
    };
}();
var pages = pages || {};
pages.agendamento = pages.agendamento || {};

pages.agendamento.services = function () {  

    var obterTodosEstabelecimentos = function () {
        var url = pages.metadata.actionUrl("/api/estabelecimentos");
        return pages.dataServices.get(url);
    }

    var obterTodosServicosPorEstabelecimentoId = function (estabelecimentoId) {
        var url = pages.metadata.actionUrl("/api/servicos?estabelecimentoId=" + estabelecimentoId);
        return pages.dataServices.get(url);
    }

    var obterTodosClientesPorEstabelecimentoId = function (estabelecimentoId) {
        var url = pages.metadata.actionUrl("/api/users/clientes?estabelecimentoId=" + estabelecimentoId);
        return pages.dataServices.get(url);
    }

    var obterTodos = function () {
        var url = pages.metadata.actionUrl("/api/agendamentos");
        return pages.dataServices.get(url);
    }

    var salvar = function (parametro) {
        var url = pages.metadata.actionUrl("/api/agendamentos");
        return pages.dataServices.postAjax(url, parametro);
    }

    var obterPorId = function (id) {
        var url = pages.metadata.actionUrl("/api/agendamentos/" + id);
        return pages.dataServices.get(url);
    }           

    var deletar = function (id) {
        var url = pages.metadata.actionUrl("/api/agendamentos/" + id);
        return pages.dataServices.deleteAjax(url);
    }  

    var atualizar = function (id, parametro) {
        var url = pages.metadata.actionUrl("/api/agendamentos/" + id);
        return pages.dataServices.putAjax(url, parametro);
    } 

    return {    
        obterTodosEstabelecimentos,
        obterTodosServicosPorEstabelecimentoId,
        obterTodosClientesPorEstabelecimentoId,
        obterTodos,
        obterPorId,
        atualizar,
        salvar,
        deletar
    };
}();
var pages = pages || {};
pages.agendamento = pages.agendamento || {};
pages.agendamento.model = pages.agendamento.model || {};
pages.agendamento.services = pages.agendamento.services || {};

pages.metadata = pages.metadata || {};
pages.dataServices = pages.dataServices || {};
pages.utils = pages.utils || {};

pages.agendamento.viewModel = function () {   
    var model = pages.agendamento.model;
    var service = pages.agendamento.services;
   
    ko.applyBindings(new function () {
        var self = this;       
        
        self.agendamentos = ko.observableArray([]);
        self.datatable = ko.observable();        

        self.init = function () {            
            self.obterAgendamentos();            
        };
        
        self.obterAgendamentos = function () {
            pages.dataServices.bloquearTela();
            service.obterTodos().then(function (result) {
                result.forEach(function (item) {
                    self.agendamentos.push(new model.vmAgendamento(item));
                });                
            }).catch(function (mensagem) {
                console.log(mensagem);
            }).finally(function () {
                self.inicializarDatatable();
                pages.dataServices.desbloquearTela();
            });
        };
      
        self.inicializarDatatable = function () {
            var table = $('#datatable-agendamento').DataTable({
                lengthChange: false,
                order: [[1, 'asc']],
                responsive: true,
                columnDefs: [
                {
                    targets: [0],
                    orderable: false,
                    searchable: false,
                    visible: false
                },
                {
                    targets: [6],
                    orderable: false,
                    searchable: false,
                    className: "text-center"
                }],
                buttons: [
                    {
                        extend: 'pdfHtml5',
                        title: 'Listagem Agendamentos'
                    },
                ],
                language: pages.utils.languageDataTablePtBr               
            });

            table.buttons().container().appendTo('#datatable-agendamento_wrapper .col-md-6:eq(0)');            
            self.datatable(table);
        }; 

        self.editar = function (item) {
            pages.dataServices.bloquearTela()
            window.location.href = "/Agendamento/Edicao/" + item.agendamentoId();
        };

        self.excluir = function (item) {
            bootbox.dialog({
                closeButton: false,
                message: "Confirma a exclusão do agendamento <strong>" + item.dataAgendamento() + ' ' + item.horaInicial() + "</strong>!",               
                buttons: {
                    nao: {
                        label: "NÃO",
                        className: "btn-sm btn-danger"
                    },
                    sim: {
                        label: "SIM",
                        className: "btn-sm btn-primary",
                        callback: function () {
                            pages.dataServices.bloquearTela();
                            service.deletar(item.agendamentoId()).then(function () {
                                bootbox.alert("Agendamento excluído com sucesso!", function () {  
                                    var rowIdx = self.datatable().column(0).data().indexOf(item.agendamentoId().toString());
                                    self.datatable().row(rowIdx).remove().draw(false);
                                    self.agendamentos.remove(item);                                                                        
                                });                                 
                            }).catch(function (mensagem) {
                                bootbox.alert(mensagem);
                            }).finally(function () {
                                pages.dataServices.desbloquearTela();
                            });                            
                        }
                    }                    
                }
            });            
        };       

        self.init();

    }, bindingBody);
}();