var pages = pages || {};
pages.agendamento = pages.agendamento || {};

pages.agendamento.model = function () {

    var vmEstabelecimento = function (estabelecimento) {
        var self = this;

        self.estabelecimentoId = ko.observable(estabelecimento.estabelecimentoId);
        self.nome = ko.observable(estabelecimento.nome);       
    };  

    var vmServico = function (servico) {
        var self = this;

        self.servicoId = ko.observable(servico.servicoId);
        self.nome = ko.observable(servico.nome);
        self.duracao = ko.observable(servico.duracao);
    };

    var vmCliente = function (cliente) {
        var self = this;

        self.userId = ko.observable(cliente.id);
        self.nome = ko.observable(cliente.nome);
    };  

    var vmHorarioDisponivel = function (horarioDisponivel) {
        var self = this;
                
        self.horarioInicial = ko.observable(horarioDisponivel.horarioInicial);
        self.horarioFinal = ko.observable(horarioDisponivel.horarioFinal);
    };

    var vmAgendamento = function (agendamento, adicionarHorarioDisponivel) {
        var self = this;

        self.agendamentoId = ko.observable();
        self.dataAgendamento = ko.observable();
        self.dataAgendamentoStr = ko.observable();
        self.dataAgendamentoDP = ko.observable();
        self.dataFinalAgendamento = ko.observable();        
        self.dataFinalAgendamentoStr = ko.observable();        
        self.horaInicial = ko.observable();
        self.horaFinal = ko.observable();
        self.servicoId = ko.observable();        
        self.servicoNome = ko.observable();
        self.observacao = ko.observable();
        self.dataCadastro = ko.observable();
        self.situacao = ko.observable();
        self.userId = ko.observable();
        self.usuarioNome = ko.observable();
        self.estabelecimentoId = ko.observable();
        self.estabelecimentoNome = ko.observable();      
        self.possuiAtendimento = ko.observable(); 
        self.carregamentoEdicao = ko.observable(false);
        self.carregamentoHorarioEdicao = ko.observable(false);
        self.userIdEdicao = ko.observable();
        self.servicoIdEdicao = ko.observable(); 
        self.horaInicialEdicao = ko.observable();
        self.horaFinalEdicao = ko.observable(); 

        self.iniciar = function (agendamento) {
            
            let splitDataHoraInicial = agendamento.dataAgendamentoStr.split(' ');
            let splitDataHoraFinal = agendamento.dataFinalAgendamentoStr.split(' ');

            self.carregamentoEdicao(true);
            self.carregamentoHorarioEdicao(true);
            self.userIdEdicao(agendamento.userId);
            self.servicoIdEdicao(agendamento.servicoId);  
            self.horaInicialEdicao(splitDataHoraInicial[1]);
            self.horaFinalEdicao(splitDataHoraFinal[1]);

            self.servicoNome(agendamento.servicoNome);            
            self.usuarioNome(agendamento.usuarioNome);
            self.horaInicial(splitDataHoraInicial[1]);
            self.horaFinal(splitDataHoraFinal[1]);

            self.estabelecimentoId(agendamento.estabelecimentoId);
            self.estabelecimentoNome(agendamento.estabelecimentoNome);
            self.agendamentoId(agendamento.agendamentoId);
            self.dataAgendamentoDP(splitDataHoraInicial[0]);
            self.dataAgendamentoStr(splitDataHoraInicial[0]);
            self.dataAgendamento(agendamento.dataAgendamento);
            self.dataFinalAgendamento(agendamento.dataFinalAgendamento);
            self.dataFinalAgendamentoStr(agendamento.dataFinalAgendamentoStr);
            
            self.observacao(agendamento.observacao);
            self.dataCadastro(agendamento.dataCadastro);
            self.situacao(agendamento.situacao);
            self.possuiAtendimento(agendamento.possuiAtendimento);
            
        };

        self.limpar = function () {
            self.agendamentoId(null);
            self.dataAgendamentoDP(null);
            self.dataAgendamentoStr(null);
            self.dataAgendamento(null);
            self.dataFinalAgendamento(null);
            self.dataFinalAgendamentoStr(null);
            self.horaInicial(null);
            self.horaFinal(null);
            self.observacao(null);
            self.servicoId(null);
            self.servicoNome(null);
            self.dataCadastro(null);
            self.situacao(null);
            self.userId(null);
            self.usuarioNome(null);
            self.estabelecimentoId(null);
            self.estabelecimentoNome(null);
        };

        if (agendamento) {
            self.iniciar(agendamento, adicionarHorarioDisponivel);
        }
    };   

    var vmAgendamentoListagem = function (agendamento) {
        var self = this;

        let splitDataHoraInicial = agendamento.dataAgendamentoStr.split(' ');
        let splitDataHoraFinal = agendamento.dataFinalAgendamentoStr.split(' ');

        self.agendamentoId = ko.observable(agendamento.agendamentoId);
        self.dataAgendamento = ko.observable(agendamento.dataAgendamento);
        self.dataAgendamentoStr = ko.observable(splitDataHoraInicial[0]);
        self.dataAgendamentoDP = ko.observable(splitDataHoraInicial[0]);
        self.dataFinalAgendamento = ko.observable(agendamento.dataFinalAgendamento);
        self.dataFinalAgendamentoStr = ko.observable(agendamento.dataFinalAgendamentoStr);
        self.horaInicial = ko.observable(splitDataHoraInicial[1]);
        self.horaFinal = ko.observable(splitDataHoraFinal[1]);
        self.servicoId = ko.observable(agendamento.servicoId);
        self.servicoNome = ko.observable(agendamento.servicoNome);
        self.observacao = ko.observable(agendamento.observacao);
        self.dataCadastro = ko.observable(agendamento.dataCadastro);
        self.situacao = ko.observable(agendamento.situacao);
        self.userId = ko.observable(agendamento.userId);
        self.usuarioNome = ko.observable(agendamento.usuarioNome);
        self.estabelecimentoId = ko.observable(agendamento.estabelecimentoId);
        self.estabelecimentoNome = ko.observable(agendamento.estabelecimentoNome);
        self.possuiAtendimento = ko.observable(agendamento.possuiAtendimento);
    };    

    return {       
        vmServico,
        vmCliente,
        vmEstabelecimento,
        vmAgendamento,
        vmAgendamentoListagem,
        vmHorarioDisponivel
    };
}();
var pages = pages || {};
pages.agendamento = pages.agendamento || {};

pages.agendamento.services = function () {  

    var EPerfil = {
        ADMINISTRADOR: "Administrador",
        GERENTE: "Gerente",
        CLIENTE: "Cliente"
    }; 

    var ESituacao = {
        ATIVO: "Ativo",
        PENDENTE: "Pendente",
        FINALIZADO: "Finalizado",
        CANCELADO: "Cancelado",
        INATIVO: "Inativo"
    }; 

    var obterTodosEstabelecimentos = function () {
        var url = pages.metadata.actionUrl("/api/estabelecimentos");
        return pages.dataServices.get(url);
    }

    var obterTodosServicosPorEstabelecimentoId = function (estabelecimentoId) {
        var url = pages.metadata.actionUrl("/api/servicos/ativo?estabelecimentoId=" + estabelecimentoId);
        return pages.dataServices.get(url);
    }

    var obterTodosClientesPorEstabelecimentoId = function (estabelecimentoId) {
        var url = pages.metadata.actionUrl("/api/users/clientes?estabelecimentoId=" + estabelecimentoId);
        return pages.dataServices.get(url);
    }

    var obterHorariosDisponiveis = function (dataAgendamento, estabelecimentoId, servicoId) {
        var url = pages.metadata.actionUrl("/api/agendamentos/horariosDisponiveis?dataAgendamento=" + dataAgendamento + "&estabelecimentoId=" + estabelecimentoId + "&servicoId=" + servicoId);
        return pages.dataServices.get(url);
    }

    var obterTodos = function (estabelecimentoId) {
        var url = pages.metadata.actionUrl("/api/agendamentos?estabelecimentoId=" + estabelecimentoId);
        return pages.dataServices.get(url);
    }

    var salvar = function (parametro) {
        var url = pages.metadata.actionUrl("/api/agendamentos");
        return pages.dataServices.postAjax(url, parametro);
    }

    var obterPorId = function (id) {
        var url = pages.metadata.actionUrl("/api/agendamentos/" + id);
        return pages.dataServices.get(url);
    }           

    var deletar = function (id) {
        var url = pages.metadata.actionUrl("/api/agendamentos/" + id);
        return pages.dataServices.deleteAjax(url);
    }  

    var atualizar = function (id, parametro) {
        var url = pages.metadata.actionUrl("/api/agendamentos/" + id);
        return pages.dataServices.putAjax(url, parametro);
    } 

    return {  
        EPerfil,
        ESituacao,
        obterTodosEstabelecimentos,
        obterTodosServicosPorEstabelecimentoId,
        obterTodosClientesPorEstabelecimentoId,
        obterHorariosDisponiveis,
        obterTodos,
        obterPorId,
        atualizar,
        salvar,
        deletar
    };
}();
var pages = pages || {};
pages.agendamento = pages.agendamento || {};
pages.agendamento.model = pages.agendamento.model || {};
pages.agendamento.services = pages.agendamento.services || {};

pages.metadata = pages.metadata || {};
pages.dataServices = pages.dataServices || {};
pages.utils = pages.utils || {};

pages.agendamento.viewModel = function () {   
    var model = pages.agendamento.model;
    var service = pages.agendamento.services;
   
    var viewModelAgendamento = new function () {
        var self = this;       
        
        self.agendamentos = ko.observableArray([]);
        self.datatable = ko.observable();        
        self.usuarioLogado = ko.observable(new pages.menu.model.vmUsuarioLogado(getDataToken()));

        self.init = function () {           
            self.obterAgendamentos(self.usuarioLogado().isAdministrador() ? null : self.usuarioLogado().estabelecimentoId());                    
        };
        
        self.obterAgendamentos = function (estabelecimentoId) {
            pages.dataServices.bloquearTela();
            service.obterTodos(estabelecimentoId).then(function (result) {
                result.data.forEach(function (item) {
                    self.agendamentos.push(new model.vmAgendamentoListagem(item));
                });                
            }).catch(function (result) {
                console.log(result.data);
            }).finally(function () {
                self.inicializarDatatable();
                pages.dataServices.desbloquearTela();
            });
        };
      
        self.inicializarDatatable = function () {
            var table = $('#datatable-agendamento').DataTable({
                lengthChange: false,
                order: [[0, 'desc']],
                responsive: true,
                columnDefs: [                
                {
                    targets: [7],
                    orderable: false,
                    searchable: false,
                    className: "text-center"
                }],
                buttons: [
                    {
                        extend: 'pdfHtml5',
                        title: 'Listagem Agendamentos'
                    },
                ],
                language: pages.utils.languageDataTablePtBr               
            });

            table.buttons().container().appendTo('#datatable-agendamento_wrapper .col-md-6:eq(0)');            
            self.datatable(table);
        }; 

        self.editar = function (agendamentoId) {
            pages.dataServices.bloquearTela()
            window.location.href = "/Agendamento/Edicao/" + agendamentoId;
        };

        self.visualizar = function (agendamentoId) {
            pages.dataServices.bloquearTela();
            window.location.href = "/Agendamento/Visualizar/" + agendamentoId;
        };

        self.iniciarAtendimento = function (agendamentoId) {
            pages.dataServices.bloquearTela()
            window.location.href = "/Atendimento/Cadastro?agendamentoId=" + agendamentoId;
        };

        self.excluir = function (agendamentoId) {
            bootbox.dialog({
                closeButton: false,
                message: "Confirma a exclusão do agendamento?",               
                buttons: {
                    nao: {
                        label: "NÃO",
                        className: "btn-sm btn-danger"
                    },
                    sim: {
                        label: "SIM",
                        className: "btn-sm btn-primary",
                        callback: function () {
                            pages.dataServices.bloquearTela();
                            service.deletar(agendamentoId).then(function () {
                                bootbox.alert("Agendamento excluído com sucesso!", function () {  
                                    location.reload();                                                                      
                                });                                 
                            }).catch(function (result) {
                                if (result.exibeMensagem)
                                    bootbox.alert(result.data);
                            }).finally(function () {
                                pages.dataServices.desbloquearTela();
                            });                            
                        }
                    }                    
                }
            });            
        };       

        self.init();
    };

    ko.applyBindings(viewModelAgendamento, bindingBody);   

    $('#datatable-agendamento tbody').on('click', '#btnVisualizar', function (event) {
        var agendamentoId = event.currentTarget.value;
        viewModelAgendamento.visualizar(agendamentoId);
    });

    $('#datatable-agendamento tbody').on('click', '#btnEditar', function (event) {
        var agendamentoId = event.currentTarget.value;
        viewModelAgendamento.editar(agendamentoId);
    });

    $('#datatable-agendamento tbody').on('click', '#btnIniciarAtendimento', function (event) {
        var agendamentoId = event.currentTarget.value;
        viewModelAgendamento.iniciarAtendimento(agendamentoId);
    });

    $('#datatable-agendamento tbody').on('click', '#btnExcluir', function (event) {
        var agendamentoId = event.currentTarget.value;
        viewModelAgendamento.excluir(agendamentoId);
    });    
}();