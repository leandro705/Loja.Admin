var pages = pages || {};
pages.login = pages.login || {};

pages.login.model = function () {

    var vmEstabelecimento = function (estabelecimento) {
        var self = this;

        self.estabelecimentoId = ko.observable();
        self.nome = ko.observable();
        self.email = ko.observable();
        self.descricao = ko.observable();
        self.url = ko.observable();        

        if (estabelecimento) {
            self.estabelecimentoId(estabelecimento.estabelecimentoId);
            self.nome(estabelecimento.nome);
            self.email(estabelecimento.email);
            self.descricao(estabelecimento.descricao);
            self.url(estabelecimento.url);            
        }
    };

    return {
        vmEstabelecimento
    };
}();
var pages = pages || {};
pages.login = pages.login || {};

pages.login.services = function () {

    var ETelaLogin = {
        LOGIN: 1,
        CADASTRO: 2,
        RECUPERACAO: 3
    };  
    var obterEstabelecimentoPorNomeUrl = function (nomeUrl) {
        var url = pages.metadata.actionUrl("/api/estabelecimentos?url=" + nomeUrl);
        return pages.dataServices.get(url);
    }

    var login = function (parametro) {
        var url = pages.metadata.actionUrl("/api/authentication/login");
        return pages.dataServices.postAjax(url, parametro);
    }

    var loginFacebook = function (parametro) {
        var url = pages.metadata.actionUrl("/api/authentication/facebook");
        return pages.dataServices.postAjax(url, parametro);
    }

    var loginGoogle = function (parametro) {
        var url = pages.metadata.actionUrl("/api/authentication/google");
        return pages.dataServices.postAjax(url, parametro);
    }    

    var salvar = function (parametro) {
        var url = pages.metadata.actionUrl("/api/authentication");
        return pages.dataServices.postAjax(url, parametro);
    }

    var recuperarSenha = function (parametro) {
        var url = pages.metadata.actionUrl("/api/authentication/enviar-email-recuperacao-senha");
        return pages.dataServices.postAjax(url, parametro);
    }    

    return {
        ETelaLogin,
        obterEstabelecimentoPorNomeUrl,
        login,
        loginFacebook,
        loginGoogle,
        salvar,
        recuperarSenha
    };
}();
var pages = pages || {};
pages.login = pages.login || {};
pages.login.services = pages.login.services || {};
var service = pages.login.services;     

renderButton = function () {

    gapi.load('auth2', function () {
        var auth2 = gapi.auth2.init({
            client_id: '773610970268-98pjeeu4kc5j147av9auh8q61oc5p9fk.apps.googleusercontent.com',
            cookiepolicy: 'single_host_origin',
            scope: 'profile email'
        });
        
        document.getElementById('google-root').addEventListener('click', function () {
            auth2.signIn().then(onSuccess).catch(onFailure);
        });
    });
}

onSuccess = function (googleUser) {
    
    var profile = googleUser.getBasicProfile(); 
    var parametro = {
        email: profile.getEmail(),
        senha: profile.getId(),
        nome: profile.getName(),
        token: googleUser.getAuthResponse().id_token
    };

    loginGoogle(parametro);
}


onFailure = function (error) {
    console.log(error);
}

loginGoogle = function (parametro) {
    service.loginGoogle(parametro).then(function (result) {
        console.log(result)
        localStorage.setItem("token", JSON.stringify(result));
        window.location.href = "/Home/Index";
    }).catch(function (mensagem) {
        bootbox.alert(mensagem);
    }).finally(function () {
                
    });
};      
   

var pages = pages || {};
pages.login = pages.login || {};
pages.login.services = pages.login.services || {};
var service = pages.login.services;
        
// Load the JavaScript SDK asynchronously
(function (d, s, id) {
    var js, fjs = d.getElementsByTagName(s)[0];
    if (d.getElementById(id)) return;
    js = d.createElement(s); js.id = id;
    js.src = "https://connect.facebook.net/pt_BR/sdk.js";
    fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));
        

fbAsyncInit = function () {
    // FB JavaScript SDK configuration and setup
    FB.init({
        appId: '331933181397981',
        cookie: true,
        xfbml: true,
        status: true,
        version: 'v8.0'
    });   
};

// Facebook login with JavaScript SDK
checkLoginState = function () {
    FB.getLoginStatus(function (response) {
        if (response.authResponse) 
            getFbUserData();
        else 
            bootbox.alert("Falha na autenticação!");
    });
}

// Fetch the user profile data from facebook
getFbUserData = function() {
    FB.api('/me', { locale: 'pt_BR', fields: 'name,email' },
        function (response) {
            console.log(JSON.stringify(response));
            var parametro = {
                email: response.email,
                senha: response.id,
                nome: response.name
            };
            loginFacebook(parametro);
        });
}        

loginFacebook = function (parametro) {
    service.loginFacebook(parametro).then(function (result) {
        console.log(result)
        localStorage.setItem("token", JSON.stringify(result));
        window.location.href = "/Home/Index";
    }).catch(function (mensagem) {
        bootbox.alert(mensagem);
    }).finally(function () {
                
    });
};      
   

var pages = pages || {};
pages.login = pages.login || {};
pages.login.model = pages.login.model || {};
pages.login.services = pages.login.services || {};

pages.metadata = pages.metadata || {};
pages.dataServices = pages.dataServices || {};
pages.utils = pages.utils || {};

pages.login.viewModel = function () {
    var model = pages.login.model;
    var service = pages.login.services;
    var nomeUrl = window.location.href.split("/").lastOrDefault();

    ko.applyBindings(new function () {
        var self = this;
        
        self.ETelaLogin = service.ETelaLogin;
        self.telaAtual = ko.observable(service.ETelaLogin.LOGIN);
        self.nome = ko.observable();
        self.email = ko.observable();
        self.senha = ko.observable();
        self.confirmarSenha = ko.observable();
        self.estabelecimento = ko.observable();    

        self.init = function () {
            self.obterEstabelecimentoPorNomeUrl(nomeUrl);
            pages.utils.initDataPassword();
            renderButton();
        };

        self.obterEstabelecimentoPorNomeUrl = function (nomeUrl) {
            service.obterEstabelecimentoPorNomeUrl(nomeUrl).then(function (result) {
                self.estabelecimento(new model.vmEstabelecimento(result[0]));
            }).catch(function (mensagem) {
                bootbox.alert(mensagem);
            }).finally(function () {

            });
        };

        self.limpar = function () {
            self.nome('');
            self.email('');
            self.senha('');
            self.confirmarSenha('');
        }

        self.alterarTela = function (telaAtual) {
            self.telaAtual(telaAtual);
            pages.utils.initDataPassword();
            fbAsyncInit();
            renderButton();
        }
        
        self.validarLogin = function () {
            var mensagens = [];

            if (isNullOrEmptyOrWriteSpace(self.email()))
                mensagens.push("<strong>E-mail</strong> é obrigatório!");
            if (isNullOrEmptyOrWriteSpace(self.senha()))
                mensagens.push("<strong>Senha</strong> é obrigatório!");
           
            if (mensagens.any()) {
                bootbox.alert(mensagens.join("</br>"));
                return false;
            }
            return true;
        }

        self.login = function () {
            document.getElementById('bt-logar').classList.toggle('running')
            if (!self.validarLogin()) { return; }

            var parametro = {
                email: self.email(),
                senha: self.senha(),
                estabelecimentoId: self.estabelecimento().estabelecimentoId()
            };

            service.login(parametro).then(function (result) {
                console.log(result)
                localStorage.setItem("token", JSON.stringify(result));
                window.location.href = "/Home/Index";
            }).catch(function (mensagem) {
                bootbox.alert(mensagem);
            }).finally(function () {
                
            });
        };


        self.validarCadastro = function () {
            var mensagens = [];

            if (isNullOrEmptyOrWriteSpace(self.nome()))
                mensagens.push("<strong>Nome</strong> é obrigatório!");
            if (isNullOrEmptyOrWriteSpace(self.email()))
                mensagens.push("<strong>E-mail</strong> é obrigatório!");
            if (isNullOrEmptyOrWriteSpace(self.senha()))
                mensagens.push("<strong>Senha</strong> é obrigatório!");
            if (isNullOrEmptyOrWriteSpace(self.confirmarSenha()))
                mensagens.push("<strong>Confirmar Senha</strong> é obrigatório!");
            if (self.senha() !== self.confirmarSenha())
                mensagens.push("<strong>Senha</strong> e <strong>Confirmar Senha</strong> devem ser iguais!");

            if (mensagens.any()) {
                bootbox.alert(mensagens.join("</br>"));
                return false;
            }
            return true;
        }

        self.salvar = function () {

            if (!self.validarCadastro()) { return; }

            var parametro = {
                nome: self.nome(),
                email: self.email(),
                senha: self.senha(),
                estabelecimentoId: self.estabelecimento().estabelecimentoId()
            };

            service.salvar(parametro).then(function () {
                bootbox.alert("Usuario cadastrado com sucesso!");
                self.limpar();
                self.alterarTela(service.ETelaLogin.LOGIN)
            }).catch(function (mensagem) {
                bootbox.alert(mensagem);
            }).finally(function () {

            });
        };

        self.validarRecuperarSenha = function () {
            var mensagens = [];
            
            if (isNullOrEmptyOrWriteSpace(self.email()))
                mensagens.push("<strong>E-mail</strong> é obrigatório!");            

            if (mensagens.any()) {
                bootbox.alert(mensagens.join("</br>"));
                return false;
            }
            return true;
        }

        self.recuperarSenha = function () {

            if (!self.validarRecuperarSenha()) { return; }

            var parametro = {               
                email: self.email()
            };

            service.recuperarSenha(parametro).then(function () {
                bootbox.alert("Enviado e-mail para cadastrar nova senha!");
                self.limpar();
                self.alterarTela(service.ETelaLogin.LOGIN)
            }).catch(function (mensagem) {
                bootbox.alert(mensagem);
            }).finally(function () {

            });
        }; 

        self.init();

    }, bindingBody);
}();