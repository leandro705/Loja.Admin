var pages = pages || {};
pages.atendimento = pages.atendimento || {};

pages.atendimento.model = function () {

    var vmEstabelecimento = function (estabelecimento) {
        var self = this;

        self.estabelecimentoId = ko.observable(estabelecimento.estabelecimentoId);
        self.nome = ko.observable(estabelecimento.nome);
    };

    var vmServico = function (servico) {
        var self = this;

        self.servicoId = ko.observable(servico.servicoId);
        self.nome = ko.observable(servico.nome);
        self.valor = ko.observable(servico.valorFormatado);
    };

    var vmCliente = function (cliente) {
        var self = this;

        self.userId = ko.observable(cliente.id);
        self.nome = ko.observable(cliente.nome);
    }; 

    var vmAtendimento = function (atendimento) {
        var self = this;

        self.atendimentoId = ko.observable();
        self.dataAtendimento = ko.observable();       
        self.dataAtendimentoDP = ko.observable();              
        self.valor = ko.observable();
        self.desconto = ko.observable();       
        self.valorTotal = ko.observable();
        self.observacao = ko.observable();

        self.dataCadastro = ko.observable();
        self.situacao = ko.observable();
        self.userId = ko.observable();
        self.usuarioNome = ko.observable();
        self.estabelecimentoId = ko.observable();
        self.estabelecimentoNome = ko.observable();

        self.servicoId = ko.observable();
        self.servicoNome = ko.observable();

        self.agendamentoId = ko.observable();

        self.atendimentoItens = ko.observableArray([]);

        self.atendimentoItens.subscribe(function (itens) {
            if (!itens) return;

            let soma = itens.reduce(function (soma, item) {
                let valor = isNaN(parseFloatVirgula(item.valor())) ? 0 : parseFloatVirgula(item.valor());
                return soma + valor;
            }, 0);

            self.valor(soma.toFixed(2).toString().replace('.', ','));
        });

        ko.computed(function () {
            let valor = isNaN(parseFloatVirgula(self.valor())) ? 0 : parseFloatVirgula(self.valor());
            let desconto = isNaN(parseFloatVirgula(self.desconto())) ? 0 : parseFloatVirgula(self.desconto());

            if (desconto > valor) {
                bootbox.alert("Desconto n√£o pode ser maior que o valor!");
                self.desconto(null);
                desconto = 0;
            }

            let valorTotal = valor - desconto;
            self.valorTotal(valorTotal.toFixed(2).toString().replace('.', ','));
        });

        if (atendimento) {
            
            self.atendimentoId(atendimento.atendimentoId);
            self.dataAtendimentoDP(atendimento.dataAtendimento);
            self.dataAtendimento(atendimento.dataAtendimento);
            self.valor(atendimento.valorFormatado);
            self.desconto(atendimento.descontoFormatado);
            self.observacao(atendimento.observacao);            

            self.dataCadastro(atendimento.dataCadastro);
            self.situacao(atendimento.situacao);
            self.userId(atendimento.userId);
            self.usuarioNome(atendimento.usuarioNome);
            self.estabelecimentoId(atendimento.estabelecimentoId);
            self.estabelecimentoNome(atendimento.estabelecimentoNome);

            atendimento.atendimentoItens.forEach(function (item) {
                self.atendimentoItens.push(new vmAtendimentoItem(item));
            });
        }

        self.preencherAgendamento = function (agendamento) {
            let splitdataAgendamento = agendamento.dataAgendamentoStr.split(' ');
            self.agendamentoId(agendamento.agendamentoId);
            self.dataAtendimentoDP(splitdataAgendamento[0]);
            self.dataAtendimento(splitdataAgendamento[0]);
            self.userId(agendamento.userId);
            self.usuarioNome(agendamento.usuarioNome);
            self.estabelecimentoId(agendamento.estabelecimentoId);
            self.estabelecimentoNome(agendamento.estabelecimentoNome);

            self.atendimentoItens.push(new vmAtendimentoItem({
                servicoId: agendamento.servicoId,
                servicoNome: agendamento.servicoNome,
                valorFormatado: agendamento.servicoValor
            }));            
        }
    }; 

    var vmAtendimentoItem = function (atendimentoItem) {
        var self = this;

        self.atendimentoItemId = ko.observable();       
        self.valor = ko.observable(); 
        self.servicoId = ko.observable();
        self.servicoNome = ko.observable();      

        if (atendimentoItem) {
            self.atendimentoItemId(atendimentoItem.atendimentoId);         
            self.valor(atendimentoItem.valorFormatado);
            self.servicoId(atendimentoItem.servicoId);
            self.servicoNome(atendimentoItem.servicoNome);
        }
    };

    return { 
        vmEstabelecimento,
        vmServico,
        vmCliente,
        vmAtendimento,
        vmAtendimentoItem
    };
}();
var pages = pages || {};
pages.atendimento = pages.atendimento || {};

pages.atendimento.services = function () {  

    var obterAgendamentoPorId = function (id) {
        var url = pages.metadata.actionUrl("/api/agendamentos/" + id);
        return pages.dataServices.get(url);
    } 

    var obterTodosEstabelecimentos = function () {
        var url = pages.metadata.actionUrl("/api/estabelecimentos");
        return pages.dataServices.get(url);
    }

    var obterTodosServicosPorEstabelecimentoId = function (estabelecimentoId) {
        var url = pages.metadata.actionUrl("/api/servicos/ativo?estabelecimentoId=" + estabelecimentoId);
        return pages.dataServices.get(url);
    }

    var obterTodosClientesPorEstabelecimentoId = function (estabelecimentoId) {
        var url = pages.metadata.actionUrl("/api/users/clientes?estabelecimentoId=" + estabelecimentoId);
        return pages.dataServices.get(url);
    }

    var obterTodos = function (estabelecimentoId) {
        var url = pages.metadata.actionUrl("/api/atendimentos?estabelecimentoId=" + estabelecimentoId);
        return pages.dataServices.get(url);
    }

    var salvar = function (parametro) {
        var url = pages.metadata.actionUrl("/api/atendimentos");
        return pages.dataServices.postAjax(url, parametro);
    }

    var obterPorId = function (id) {
        var url = pages.metadata.actionUrl("/api/atendimentos/" + id);
        return pages.dataServices.get(url);
    }           

    var deletar = function (id) {
        var url = pages.metadata.actionUrl("/api/atendimentos/" + id);
        return pages.dataServices.deleteAjax(url);
    }  

    var finalizarAtendimento = function (id) {
        var url = pages.metadata.actionUrl("/api/atendimentos/" + id + "/finalizar");
        return pages.dataServices.putAjax(url);
    }  

    var atualizar = function (id, parametro) {
        var url = pages.metadata.actionUrl("/api/atendimentos/" + id);
        return pages.dataServices.putAjax(url, parametro);
    }     

    return {    
        obterAgendamentoPorId,
        obterTodosEstabelecimentos,
        obterTodosServicosPorEstabelecimentoId,
        obterTodosClientesPorEstabelecimentoId,
        obterTodos,
        obterPorId,
        atualizar,
        salvar,
        deletar,
        finalizarAtendimento
    };
}();
var pages = pages || {};
pages.atendimento = pages.atendimento || {};
pages.atendimento.model = pages.atendimento.model || {};
pages.atendimento.services = pages.atendimento.services || {};

pages.metadata = pages.metadata || {};
pages.dataServices = pages.dataServices || {};
pages.utils = pages.utils || {};

pages.atendimento.viewModel = function () {   
    var model = pages.atendimento.model;
    var service = pages.atendimento.services;
   
    ko.applyBindings(new function () {
        var self = this;       
        
        self.atendimentos = ko.observableArray([]);
        self.datatable = ko.observable();    
        self.usuarioLogado = ko.observable(new pages.menu.model.vmUsuarioLogado(getDataToken()));

        self.init = function () {            
            self.obterAtendimentos(self.usuarioLogado().isAdministrador() ? null : self.usuarioLogado().estabelecimentoId());            
        };
        
        self.obterAtendimentos = function (estabelecimentoId) {
            pages.dataServices.bloquearTela();
            service.obterTodos(estabelecimentoId).then(function (result) {
                result.data.forEach(function (item) {
                    self.atendimentos.push(new model.vmAtendimento(item));
                });                
            }).catch(function (result) {
                console.log(result.data);
            }).finally(function () {
                self.inicializarDatatable();
                pages.dataServices.desbloquearTela();
            });
        };
      
        self.inicializarDatatable = function () {
            var table = $('#datatable-atendimento').DataTable({
                lengthChange: false,
                order: [[1, 'asc']],
                responsive: true,
                columnDefs: [                
                {
                    targets: [6],
                    orderable: false,
                    searchable: false,
                    className: "text-center"
                }],
                buttons: [
                    {
                        extend: 'pdfHtml5',
                        title: 'Listagem Atendimentos'
                    },
                ],
                language: pages.utils.languageDataTablePtBr               
            });

            table.buttons().container().appendTo('#datatable-atendimento_wrapper .col-md-6:eq(0)');            
            self.datatable(table);
        }; 

        self.editar = function (item) {
            pages.dataServices.bloquearTela()
            window.location.href = "/Atendimento/Edicao/" + item.atendimentoId();
        };

        self.excluir = function (item) {
            bootbox.dialog({
                closeButton: false,
                message: "Confirma a exclus√£o do atendimento <strong>" + item.atendimentoId() + "</strong>!",               
                buttons: {
                    nao: {
                        label: "N√ÉO",
                        className: "btn-sm btn-danger"
                    },
                    sim: {
                        label: "SIM",
                        className: "btn-sm btn-primary",
                        callback: function () {
                            pages.dataServices.bloquearTela();
                            service.deletar(item.atendimentoId()).then(function () {
                                bootbox.alert("Atendimento exclu√≠do com sucesso!", function () {  
                                    location.reload();                                                                      
                                });                                 
                            }).catch(function (result) {
                                if (result.exibeMensagem)
                                    bootbox.alert(result.data);
                            }).finally(function () {
                                pages.dataServices.desbloquearTela();
                            });                            
                        }
                    }                    
                }
            });            
        };   

        self.finalizarAtendimento = function (item) {
            bootbox.dialog({
                closeButton: false,
                message: "Confirma a finaliza√ß√£o do atendimento <strong>" + item.atendimentoId() + "</strong>!",
                buttons: {
                    nao: {
                        label: "N√ÉO",
                        className: "btn-sm btn-danger"
                    },
                    sim: {
                        label: "SIM",
                        className: "btn-sm btn-primary",
                        callback: function () {
                            pages.dataServices.bloquearTela();
                            service.finalizarAtendimento(item.atendimentoId()).then(function () {
                                bootbox.alert("Atendimento finalizado com sucesso!", function () {
                                    location.reload();
                                });
                            }).catch(function (result) {
                                if (result.exibeMensagem)
                                    bootbox.alert(result.data);
                            }).finally(function () {
                                pages.dataServices.desbloquearTela();
                            });
                        }
                    }
                }
            });
        };       

        self.init();

    }, bindingBody);
}();