var pages = pages || {};
pages.atendimento = pages.atendimento || {};

pages.atendimento.model = function () {

    var vmEstabelecimento = function (estabelecimento) {
        var self = this;

        self.estabelecimentoId = ko.observable(estabelecimento.estabelecimentoId);
        self.nome = ko.observable(estabelecimento.nome);
    };

    var vmServico = function (servico) {
        var self = this;

        self.servicoId = ko.observable(servico.servicoId);
        self.nome = ko.observable(servico.nome);
        self.valor = ko.observable(servico.valorFormatado);
    };

    var vmCliente = function (cliente) {
        var self = this;

        self.userId = ko.observable(cliente.id);
        self.nome = ko.observable(cliente.nome);
    }; 

    var vmAtendimento = function (atendimento) {
        var self = this;

        self.atendimentoId = ko.observable();
        self.dataAtendimento = ko.observable();       
        self.dataAtendimentoDP = ko.observable();              
        self.valor = ko.observable();
        self.desconto = ko.observable();       
        self.valorTotal = ko.observable();
        self.observacao = ko.observable();

        self.dataCadastro = ko.observable();
        self.situacao = ko.observable();
        self.userId = ko.observable();
        self.usuarioNome = ko.observable();
        self.estabelecimentoId = ko.observable();
        self.estabelecimentoNome = ko.observable();

        self.servicoId = ko.observable();
        self.servicoNome = ko.observable();

        self.agendamentoId = ko.observable();

        self.atendimentoItens = ko.observableArray([]);

        self.atendimentoItens.subscribe(function (itens) {
            if (!itens) return;

            let soma = itens.reduce(function (soma, item) {
                let valor = isNaN(parseFloatVirgula(item.valor())) ? 0 : parseFloatVirgula(item.valor());
                return soma + valor;
            }, 0);

            self.valor(soma.toFixed(2).toString().replace('.', ','));
        });

        ko.computed(function () {
            let valor = isNaN(parseFloatVirgula(self.valor())) ? 0 : parseFloatVirgula(self.valor());
            let desconto = isNaN(parseFloatVirgula(self.desconto())) ? 0 : parseFloatVirgula(self.desconto());

            if (desconto > valor) {
                bootbox.alert("Desconto nÃ£o pode ser maior que o valor!");
                self.desconto(null);
                desconto = 0;
            }

            let valorTotal = valor - desconto;
            self.valorTotal(valorTotal.toFixed(2).toString().replace('.', ','));
        });

        if (atendimento) {
            
            self.atendimentoId(atendimento.atendimentoId);
            self.dataAtendimentoDP(atendimento.dataAtendimento);
            self.dataAtendimento(atendimento.dataAtendimento);
            self.valor(atendimento.valorFormatado);
            self.desconto(atendimento.descontoFormatado);
            self.observacao(atendimento.observacao);            

            self.dataCadastro(atendimento.dataCadastro);
            self.situacao(atendimento.situacao);
            self.userId(atendimento.userId);
            self.usuarioNome(atendimento.usuarioNome);
            self.estabelecimentoId(atendimento.estabelecimentoId);
            self.estabelecimentoNome(atendimento.estabelecimentoNome);

            atendimento.atendimentoItens.forEach(function (item) {
                self.atendimentoItens.push(new vmAtendimentoItem(item));
            });
        }

        self.preencherAgendamento = function (agendamento) {
            let splitdataAgendamento = agendamento.dataAgendamentoStr.split(' ');
            self.agendamentoId(agendamento.agendamentoId);
            self.dataAtendimentoDP(splitdataAgendamento[0]);
            self.dataAtendimento(splitdataAgendamento[0]);
            self.userId(agendamento.userId);
            self.usuarioNome(agendamento.usuarioNome);
            self.estabelecimentoId(agendamento.estabelecimentoId);
            self.estabelecimentoNome(agendamento.estabelecimentoNome);

            self.atendimentoItens.push(new vmAtendimentoItem({
                servicoId: agendamento.servicoId,
                servicoNome: agendamento.servicoNome,
                valorFormatado: agendamento.servicoValor
            }));            
        }
    }; 

    var vmAtendimentoItem = function (atendimentoItem) {
        var self = this;

        self.atendimentoItemId = ko.observable();       
        self.valor = ko.observable(); 
        self.servicoId = ko.observable();
        self.servicoNome = ko.observable();      

        if (atendimentoItem) {
            self.atendimentoItemId(atendimentoItem.atendimentoId);         
            self.valor(atendimentoItem.valorFormatado);
            self.servicoId(atendimentoItem.servicoId);
            self.servicoNome(atendimentoItem.servicoNome);
        }
    };

    return { 
        vmEstabelecimento,
        vmServico,
        vmCliente,
        vmAtendimento,
        vmAtendimentoItem
    };
}();
var pages = pages || {};
pages.atendimento = pages.atendimento || {};

pages.atendimento.services = function () {  

    var obterAgendamentoPorId = function (id) {
        var url = pages.metadata.actionUrl("/api/agendamentos/" + id);
        return pages.dataServices.get(url);
    } 

    var obterTodosEstabelecimentos = function () {
        var url = pages.metadata.actionUrl("/api/estabelecimentos");
        return pages.dataServices.get(url);
    }

    var obterTodosServicosPorEstabelecimentoId = function (estabelecimentoId) {
        var url = pages.metadata.actionUrl("/api/servicos?estabelecimentoId=" + estabelecimentoId);
        return pages.dataServices.get(url);
    }

    var obterTodosClientesPorEstabelecimentoId = function (estabelecimentoId) {
        var url = pages.metadata.actionUrl("/api/users/clientes?estabelecimentoId=" + estabelecimentoId);
        return pages.dataServices.get(url);
    }

    var obterTodos = function (estabelecimentoId) {
        var url = pages.metadata.actionUrl("/api/atendimentos?estabelecimentoId=" + estabelecimentoId);
        return pages.dataServices.get(url);
    }

    var salvar = function (parametro) {
        var url = pages.metadata.actionUrl("/api/atendimentos");
        return pages.dataServices.postAjax(url, parametro);
    }

    var obterPorId = function (id) {
        var url = pages.metadata.actionUrl("/api/atendimentos/" + id);
        return pages.dataServices.get(url);
    }           

    var deletar = function (id) {
        var url = pages.metadata.actionUrl("/api/atendimentos/" + id);
        return pages.dataServices.deleteAjax(url);
    }  

    var finalizarAtendimento = function (id) {
        var url = pages.metadata.actionUrl("/api/atendimentos/" + id + "/finalizar");
        return pages.dataServices.putAjax(url);
    }  

    var atualizar = function (id, parametro) {
        var url = pages.metadata.actionUrl("/api/atendimentos/" + id);
        return pages.dataServices.putAjax(url, parametro);
    }     

    return {    
        obterAgendamentoPorId,
        obterTodosEstabelecimentos,
        obterTodosServicosPorEstabelecimentoId,
        obterTodosClientesPorEstabelecimentoId,
        obterTodos,
        obterPorId,
        atualizar,
        salvar,
        deletar,
        finalizarAtendimento
    };
}();
var pages = pages || {};
pages.atendimento = pages.atendimento || {};
pages.atendimento.model = pages.atendimento.model || {};
pages.atendimento.services = pages.atendimento.services || {};

pages.metadata = pages.metadata || {};
pages.dataServices = pages.dataServices || {};
pages.utils = pages.utils || {};

pages.atendimento.edicaoViewModel = function () {   
    var model = pages.atendimento.model;
    var service = pages.atendimento.services;
    var id = window.location.href.split("/").lastOrDefault();
   
    ko.applyBindings(new function () {
        var self = this;       
        
        self.atendimento = ko.observable();
        self.servicoId = ko.observable();
        self.valor = ko.observable();
        self.estabelecimentos = ko.observableArray([]);
        self.servicos = ko.observableArray([]);
        self.clientes = ko.observableArray([]);
        self.bloqueiaSalvar = ko.observable(false);
        self.usuarioLogado = ko.observable(new pages.menu.model.vmUsuarioLogado(getDataToken()));

        self.init = function () {

            self.servicoId.subscribe(function (servicoId) {
                if (!servicoId) return;

                let servico = self.servicos().firstOrDefault(x => x.servicoId() === servicoId);
                self.valor(servico.valor());
            });

            self.obterAtendimentoPorId(id);
        };

        self.obterAtendimentoPorId = function (atendimentoId) {
            pages.dataServices.bloquearTela();
            service.obterPorId(atendimentoId).then(async function (result) {

                let atendimento = new model.vmAtendimento(result)

                await self.obterTodosServicosPorEstabelecimentoId(result.estabelecimentoId)
                await self.obterTodosClientesPorEstabelecimentoId(result.estabelecimentoId)

                self.atendimento(atendimento);

                if (self.usuarioLogado().isAdministrador()) {
                    await self.obterTodosEstabelecimentos();
                    atendimento.estabelecimentoId.subscribe(function (estabelecimentoId) {
                        if (!estabelecimentoId) return;

                        self.servicos([]);
                        self.clientes([]);

                        self.obterTodosServicosPorEstabelecimentoId(estabelecimentoId);
                        self.obterTodosClientesPorEstabelecimentoId(estabelecimentoId);
                    });
                }

            }).catch(function (mensagem) {
                console.log(mensagem);
            }).finally(function () {
                pages.dataServices.desbloquearTela();
            });
        };

        self.obterTodosEstabelecimentos = function () {
            return new Promise(function (sucesso, falha) {
                pages.dataServices.bloquearTela();
                service.obterTodosEstabelecimentos().then(function (result) {
                    result.forEach(function (item) {
                        self.estabelecimentos.push(new model.vmEstabelecimento(item));
                    });
                    sucesso();
                }).catch(function (mensagem) {
                    console.log(mensagem);
                    falha();
                }).finally(function () {
                    pages.dataServices.desbloquearTela();
                });
            });
        };

        self.obterTodosServicosPorEstabelecimentoId = function (estabelecimentoId) {
            return new Promise(function (sucesso, falha) {
                pages.dataServices.bloquearTela();
                service.obterTodosServicosPorEstabelecimentoId(estabelecimentoId).then(function (result) {
                    result.forEach(function (item) {
                        self.servicos.push(new model.vmServico(item));
                    });
                    sucesso();
                }).catch(function (mensagem) {
                    console.log(mensagem);
                    falha();
                }).finally(function () {
                    pages.dataServices.desbloquearTela();
                });
            });
        };

        self.obterTodosClientesPorEstabelecimentoId = function (estabelecimentoId) {
            return new Promise(function (sucesso, falha) {
                pages.dataServices.bloquearTela();
                service.obterTodosClientesPorEstabelecimentoId(estabelecimentoId).then(function (result) {
                    result.forEach(function (item) {
                        self.clientes.push(new model.vmCliente(item));
                    });
                    sucesso();
                }).catch(function (mensagem) {
                    console.log(mensagem);
                    falha();
                }).finally(function () {
                    pages.dataServices.desbloquearTela();
                });
            });
        }; 

        self.adicionar = function () {
            if (!self.validarAdicionar()) { return; }

            let servico = self.servicos().firstOrDefault(x => x.servicoId() === self.servicoId());

            self.atendimento().atendimentoItens.push(new model.vmAtendimentoItem({
                servicoId: servico.servicoId(),
                servicoNome: servico.nome(),
                valorFormatado: self.valor()
            }));

            self.limparItem();
        };

        self.remover = function (item) {
            self.atendimento().atendimentoItens.remove(item);
        };

        self.limparItem = function () {
            self.servicoId(null);
            self.valor(null);
        };

        self.validarAdicionar = function () {
            var mensagens = [];

            if (isNullOrEmpty(self.servicoId()))
                mensagens.push("<strong>ServiÃ§o</strong> Ã© obrigatÃ³rio!");

            if (isNullOrEmpty(self.valor()))
                mensagens.push("<strong>Valor</strong> Ã© obrigatÃ³rio!");

            let servico = self.atendimento().atendimentoItens().firstOrDefault(x => x.servicoId() === self.servicoId());

            if (servico)
                mensagens.push("<strong>ServiÃ§o</strong> jÃ¡ foi adicionado!");

            if (mensagens.any()) {
                bootbox.alert(mensagens.join("</br>"));
                return false;
            }
            return true;
        };

        self.validar = function () {
            var mensagens = [];

            if (isNullOrEmpty(self.atendimento().dataAtendimento()))
                mensagens.push("<strong>Data Atendimento</strong> Ã© obrigatÃ³rio!");

            if (isNullOrEmpty(self.atendimento().valor()))
                mensagens.push("<strong>Valor</strong> Ã© obrigatÃ³rio!");

            if (isNullOrEmpty(self.atendimento().userId()))
                mensagens.push("<strong>Cliente</strong> Ã© obrigatÃ³rio!");

            if (isNullOrEmpty(self.atendimento().atendimentoItens().any()))
                mensagens.push("Nenhum <strong>ServiÃ§o</strong> selecionado!");

            if (mensagens.any()) {
                bootbox.alert(mensagens.join("</br>"));
                return false;
            }
            return true;
        };

        self.salvar = function () {

            if (!self.validar()) { return; }                       

            var parametro = {
                atendimentoId: self.atendimento().atendimentoId(),
                observacao: self.atendimento().observacao(),
                dataAtendimento: self.atendimento().dataAtendimento(),
                valor: parseFloatVirgula(self.atendimento().valor()),
                desconto: parseFloatVirgula(self.atendimento().desconto()),
                valorTotal: parseFloatVirgula(self.atendimento().valorTotal()),
                userId: self.usuarioLogado().isAdministrador() ? self.atendimento().userId() : self.usuarioLogado().id(),
                estabelecimentoId: self.usuarioLogado().isAdministrador() ? self.atendimento().estabelecimentoId() : self.usuarioLogado().estabelecimentoId(),
                atendimentoItens: self.formataAtendimentoItens()
            };

            self.bloqueiaSalvar(true);
            pages.dataServices.bloquearTela();
            service.atualizar(id, parametro).then(function () {
                bootbox.alert("Atendimento atualizado com sucesso!", function () {
                    self.voltar();
                });
            }).catch(function (mensagem) {
                self.bloqueiaSalvar(false);
                console.log(mensagem);            
            }).finally(function () {
                pages.dataServices.desbloquearTela();
            });
        };

        self.formataAtendimentoItens = function () {
            var atendimentoItens = [];
            self.atendimento().atendimentoItens().forEach(function (item) {
                atendimentoItens.push({
                    atendimentoItemId: item.atendimentoItemId(),
                    valor: parseFloatVirgula(item.valor()),
                    servicoId: item.servicoId()
                });
            });

            return atendimentoItens;
        };

        self.voltar = function () {
            pages.dataServices.bloquearTela();
            window.location.href = "/Atendimento/Index";
        };

        self.init();

    }, bindingBody);
}();